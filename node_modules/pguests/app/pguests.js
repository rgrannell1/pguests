
"use strict"





const constants      = require('pguests/commons/constants')
const reporters      = require('pguests/reporters/reporters')
const packetData     = require('pguests/network/packet-data')





const pguests = rawArgs => {

	const args     = pguests.preprocess(rawArgs)
	const state    = {
		received: [ ]
	}

	const pconn    = packetData( )

	pconn.on(constants.events.socketStart, socket => {
		state.received.push(socket)
	})

	pconn.on(constants.events.socketEnd, socket => {

		for (var ith = state.received.length - 1; ith >= 0; ith--) {

			if (socket[ith].src === socket.src && socket[ith].dst === socket.dst) {

				state.received.splice(ith, 1)
				break

			}

		}

	})

	pconn.on(constants.events.packet, socket => {

	})





	// TODO add live reporters! Otherwise using ev8
	if (args.timeout) {

		setTimeout(( ) => {

			reporters.reportRates(args, state.received, ( ) => {
				process.exit(0)
			})

		}, 1000 * args.timeout)

	}

	process.once(constants.signals.sigint, ( ) => {

		reporters.reportRates(args, state.received, ( ) => {
			process.exit(0)
		})

	})

}




pguests.preprocess = rawArgs => {

	var args = {
		timeout: parseFloat(rawArgs['--timeout'], 10)
	}

	if (!Number.isFinite(args.timeout) || args.timeout < 0) {
		throw Error(`Invalid timeout ${args.timeout}.`)
	}

	return args

}




module.exports = pguests
