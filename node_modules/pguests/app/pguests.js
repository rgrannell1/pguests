
"use strict"





const fs           = require('fs')
const events       = require('events')

const constants    = require('pguests/constants/constants')
const commons      = require('pguests/constants/commons')
const readProcFile = require('pguests/fs/read-proc-file')





const parseProcTcp = (parser, content) => {

	const whitespace  = /\s+/g
	const isTruthy    = val => !!val

	const lines       = content.split('\n')       .filter(isTruthy)
	const headers     = lines[0].split(whitespace).filter(isTruthy)

	const connections = lines.slice(1)

	return connections
		.map(connection => connection.split(whitespace).filter(isTruthy))
		.map(part => {

			const partObj = { }

			headers.forEach((header, ith) => {
				partObj[header] = part[ith]
			})

			const addresses = {
				localAddress:  partObj.local_address,
				remoteAddress: partObj.remote_address || partObj.rem_address
			}

			return {
				localAddress:  commons.parseProcIpAddress[parser](addresses.localAddress),
				remoteAddress: commons.parseProcIpAddress[parser](addresses.remoteAddress),
				tcpState:      constants.tcpStates[parseInt(partObj.st, 16)]
			}

		})

}





const emitConnectionData = ( ) => {

	const eventEmitter = new events.EventEmitter( )

	;[
		{fpath: constants.paths.tcp4, ipVersion: constants.protocols.ipv4},
		{fpath: constants.paths.tcp6, ipVersion: constants.protocols.ipv6}
	]
	.forEach(params => {

		readProcFile(params.fpath, (err, contents) => {

			if (err) {
				process.stderr.write(`${err.message}\n`)
			} else {

				parseProcTcp(params.ipVersion, contents).map(socket => {
					eventEmitter.emit(constants.events.socket, socket)
				})

			}

		})

	})

	return eventEmitter

}






const pguests = args => {

	var emitter = emitConnectionData( )

	emitter.on('socket', socket => {
		console.log(socket)
	})

}




module.exports = pguests
