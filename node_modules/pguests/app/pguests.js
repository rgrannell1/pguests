
"use strict"





const fs        = require('fs')
const events    = require('events')
const constants = require('pguests/constants/constants')





const standardiseIpAddress = { }

standardiseIpAddress.ipv4 = ip => {

	const addressParts = ip.split(':')

	return {

		ip: addressParts[0]
			.match(/.{1,2}/g)
			.reverse( )
			.map(byte => parseInt(byte, 16))
			.join('.'),

		port: parseInt(addressParts[1], 16)
	}

}

standardiseIpAddress.ipv6 = ip => {

	const addressParts = ip.split(':')

	return {

		ip: addressParts[0]
			.match(/.{1,4}/g)
			.reverse( )
			.join(':'),

		port: parseInt(addressParts[1], 16)

	}

}





const parseProcTcp = (parser, content) => {

	const whitespace  = /\s+/g
	const isTruthy    = val => !!val

	const lines       = content.split('\n')       .filter(isTruthy)
	const headers     = lines[0].split(whitespace).filter(isTruthy)

	const connections = lines.slice(1)

	return connections
		.map(connection => connection.split(whitespace).filter(isTruthy))
		.map(part => {

			const partObj = { }

			headers.forEach((header, ith) => {
				partObj[header] = part[ith]
			})

			const addresses = {
				localAddress:  partObj.local_address,
				remoteAddress: partObj.remote_address || partObj.rem_address
			}

			return {
				localAddress:  standardiseIpAddress[parser](addresses.localAddress),
				remoteAddress: standardiseIpAddress[parser](addresses.remoteAddress),
				tcpState:      constants.tcpStates[parseInt(partObj.st, 16)]
			}

		})

}





const emitConnectionStatus = ( ) => {

	const eventEmitter = new events.EventEmitter( )
	const emitGuests   = (eventEmitter, parser, err, contents) => {

		if (err) {

			process.stderr.write(`${err.message}\n`)

		} else {

			parseProcTcp(parser, contents).map(socket => {
				eventEmitter.emit(constants.events.socket, socket)
			})

		}

	}

	fs.watchFile(constants.paths.tcp4, (current, last) => {

		fs.readFile(
			constants.paths.tcp4, constants.encodings.ascii,
			emitGuests.bind({ }, eventEmitter, constants.protocols.ipv4))

	})

	fs.watchFile(constants.paths.tcp6, (current, last) => {

		fs.readFile(
			constants.paths.tcp6, constants.encodings.ascii,
			emitGuests.bind({ }, eventEmitter, constants.protocols.ipv6))

	})

	return eventEmitter

}






const pguests = args => {

	var emitter = emitConnectionStatus( )

	emitter.on('socket', socket => {
		console.log(socket)
	})

}




module.exports = pguests
