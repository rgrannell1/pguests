
"use strict"





const fs           = require('fs')
const events       = require('events')

const constants    = require('pguests/commons/constants')
const commons      = require('pguests/commons/commons')
const readProcFile = require('pguests/fs/read-proc-file')
const parser       = require('pguests/commons/parser')





const emitNewSockets = (eventEmitter, socket, uids) => {

	if (!uids.hasOwnProperty(socket.uid)) {

		uids.push(socket.uid)
		eventEmitter.emit(constants.events.socket, socket)

	}

}





const emitConnectionData = ( ) => {

	const eventEmitter = new events.EventEmitter( )

	// -- keep track of UUIDs, so entries aren't repeatedly emitted.
	const uids         = {
		[constants.protocols.ipv4]: [ ],
		[constants.protocols.ipv6]: [ ]
	}

	;[
		{fpath: constants.paths.tcp4, ipVersion: constants.protocols.ipv4},
		{fpath: constants.paths.tcp6, ipVersion: constants.protocols.ipv6}
	]
	.forEach(params => {

		readProcFile(params.fpath, (err, contents) => {

			if (err) {
				process.stderr.write(`${err.message}\n`)
			} else {

				parser.procTcp(params.ipVersion, contents).map(socket => {
					emitNewSockets(eventEmitter, socket, uids[params.ipVersion])
				})

			}

		})

	})

	return eventEmitter

}






const pguests = args => {

	var emitter = emitConnectionData( )

	emitter.on('socket', socket => {
		console.log(socket)
	})

}




module.exports = pguests
