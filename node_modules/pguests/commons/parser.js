
"use strict"





const constants    = require('pguests/commons/constants')
const commons      = require('pguests/commons/commons')





const parser = {
	procIpAddress: { }
}

parser.procIpAddress.ipv4 = ip => {

	const addressParts = ip.split(':')

	return {

		ip: addressParts[0]
			.match(/.{1,2}/g)
			.reverse( )
			.map(byte => parseInt(byte, 16))
			.join('.'),

		port: parseInt(addressParts[1], 16)
	}

}

parser.procIpAddress.ipv6 = ip => {

	const addressParts = ip.split(':')

	return {

		ip: addressParts[0]
			.match(/.{1,4}/g)
			.reverse( )
			.join(':'),

		port: parseInt(addressParts[1], 16)

	}

}





parser.procTcp = (ipVersion, content) => {

	const whitespace  = /\s+/g
	const isTruthy    = val => !!val

	const lines       = content.split('\n')       .filter(isTruthy)
	const headers     = lines[0].split(whitespace).filter(isTruthy)

	const connections = lines.slice(1)

	return connections
		.map(connection => connection.split(whitespace).filter(isTruthy))
		.map(part => {

			const partObj = { }

			headers.forEach((header, ith) => {
				partObj[header] = part[ith]
			})

			const addresses = {
				localAddress:  partObj.local_address,
				remoteAddress: partObj.remote_address || partObj.rem_address
			}

			return {
				localAddress:  parser.procIpAddress[ipVersion](addresses.localAddress),
				remoteAddress: parser.procIpAddress[ipVersion](addresses.remoteAddress),
				tcpState:      constants.tcpStates[parseInt(partObj.st, 16)]
			}

		})

}





module.exports = parser
