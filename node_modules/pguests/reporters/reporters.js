
"use strict"





const constants      = require('pguests/commons/constants')
const commons        = require('pguests/commons/commons')
const findIpMetadata = require('pguests/network/find-ip-metadata')





const reporters = { }





reporters.reportRates = received =>{

	// TODO refactor this garbage into multiple functions.

	var sockets = received.map(socket => {

		var reformatted = {
			local:     socket.local_address,
			remote:    socket.remote_address || socket.rem_address,
			metadata:  socket.metadata
		}

		return reformatted

	})

	var profiles = sockets.reduce((savedProfiles, socket) => {


		var matchFound = false

		for (var ith = 0; ith < savedProfiles.length; ++ith) {

			// if the remote IP has a profile.
			if (socket.remote.ip === savedProfiles[ith].ip) {

				matchFound = true

				// if the port has been connected to before.
				if (savedProfiles[ith].ports.hasOwnProperty(socket.remote.port)) {

					savedProfiles[ith].ports[socket.remote.port].push(socket.local)

				} else {

					savedProfiles[ith].ports[socket.remote.port] = [socket.local]

				}

				break

			}

		}

		if (!matchFound) {

			savedProfiles.push({

				ip:        socket.remote.ip,
				ipVersion: socket.remote.ipVersion,
				ports:     {
					[socket.remote.port]: [socket.local]
				}

			})

		}

		return savedProfiles

	}, [ ])

	// to clear the screen.
	process.stdout.write(constants.ansiiEscapes.clearScreen)

	const lengths = profiles.reduce((acc, profile) => {

		Object.keys(acc).forEach(key => {
			acc[key] = Math.max(acc[key], profile[key].length)
		})

		return acc

	}, {
		ip: -Infinity
	})

	profiles.forEach(profile => {

		// for each service running on that IP, print it's name if possible.
		// refactor thi to collect each bit of data first.

		Object.keys(profile.ports).forEach(port => {

			findIpMetadata({port, ipVersion: profile.ipVersion, ip: profile.ip}, (err, remoteMetadata) => {

				// print the remote machine IP.
				console.log('\n' + commons.padString(lengths.ip + 4, profile.ip))

				const portString = commons.padString(5 + 4, port)
				const hostname   = remoteMetadata.hostname ? remoteMetadata.hostname : 'unknown-host'

				const conns      = commons.padString(5 + 4, profile.ports[port].length)

				console.log(`    ${portString}${hostname} ${conns}`)

			})

		})

	})

}





module.exports = reporters
